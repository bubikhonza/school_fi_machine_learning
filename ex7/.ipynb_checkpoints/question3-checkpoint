{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.io import loadmat\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.datasets import make_classification\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "mat = loadmat('./arcene.mat')\n",
    "X_test = mat['X_test']\n",
    "X_train = mat['X_train']\n",
    "y_train = np.ravel(mat['y_train'].T)\n",
    "y_test = np.ravel(mat['y_test'].T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100, 10000)\n",
      "(100,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(y_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = RandomForestClassifier(n_estimators=100, random_state=0)\n",
    "model.fit(X_train, y_train)\n",
    "importances = model.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.hist(importances, bins='auto')\n",
    "plt.title(\"Histogram with 'auto' bins\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
